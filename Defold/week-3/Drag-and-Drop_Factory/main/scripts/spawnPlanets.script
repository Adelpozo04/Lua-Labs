function init(self)

	math.randomseed(os.time())

	local screenW = sys.get_config_number("display.width")
	local screenH = sys.get_config_number("display.height")

	print("gameWidth: " .. tostring(screenW) .. "  gameHeight: " .. tostring(screenH))

	for i=1, 10 do

		self.id = tostring(i)

		local x1 = math.random(100, screenW-100)
		local y1 = math.random(100, screenH-100)
		local pos = vmath.vector3(x1, y1, 1)

		factory.create("#factory", pos, nil, {}, 1)	

		print("Spawning Planet: " .. self.id .. "  x1: " .. tostring(x1) .. "  y1: " .. tostring(y1))

	end
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
